notifications:
  slack: 9livesdatazpp:rEIvPs5yjBw9GEjggS388fDO#travis

language: python

python:
  - 2.6
  - 2.7
  - 3.2
  - 3.3
  - 3.4
  - 3.5
  - 3.6
  - nightly
  - pypy
  - pypy3

branches:
  # https://github.com/travis-ci/travis-ci/issues/1147#issuecomment-160820262
  # this reduces workload on Travis if there are many pushes in a short time.
  # It does not have a drawback if:
  # - pull requests are used for review
  # - branches that we care about (not work-in-progress) are listed below
  only:
    - master

matrix:
  include:
    # jython
    - python: 2.7
      env: JYTHON=true

    # pypy
    - python: pypy
      env: PYPY_VERSION=pypy-4.0.1
    - python: pypy
      env: PYPY_VERSION=pypy-5.1
    - python: pypy3
      env: PYPY_VERSION=pypy3-2.4.0

    # Source Code Analysis is slow.  We just run it once on
    # Python 2 and once on Python 3.
    - python: 2.7
      env: MODE=SCA
    - python: 3.5
      env: MODE=SCA

    # coverage
    - python: 3.5
      env: MODE=coverage

    # Travis CI doesn't support OSX python builds officially,
    # but that won't stop us
    - python: 2.7
      os: osx
      language: generic
      env: OS_X_PYTHON_VERSION=python
    - python: 3.5
      os: osx
      language: generic
      env: OS_X_PYTHON_VERSION=python3


cache:
  - pip
  - directories:
    - $HOME/.eggs
    - $HOME/jython-pip
    - $HOME/jython
    - $HOME/.pyenv  # custom pypy versions
    - $HOME/.virtualenv/jython
    - $HOME/.virtualenv/osx-python
    - $HOME/.virtualenv/osx-python3

before_install:
  - uname -a
  - if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then lsb_release -a; fi
  - |
        # install python on OS X
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
            brew update
            brew install "$OS_X_PYTHON_VERSION"
            if [ ! -e "$HOME/.virtualenv/osx-$OS_X_PYTHON_VERSION/bin/activate" ]; then
                virtualenv -p "$OS_X_PYTHON_VERSION" "$HOME/.virtualenv/osx-$OS_X_PYTHON_VERSION"
            fi
            source "$HOME/.virtualenv/osx-$OS_X_PYTHON_VERSION/bin/activate"
        else
            echo skip
        fi
  - |
        # get jython
        if [ -n "$JYTHON" ]; then
            if [ ! -f "$HOME/.virtualenv/jython/bin/activate" ]; then
                wget http://search.maven.org/remotecontent?filepath=org/python/jython-installer/2.7.1b3/jython-installer-2.7.1b3.jar -O jython-installer-2.7.1b3.jar
                java -jar jython-installer-2.7.1b3.jar --silent --directory "$HOME/jython"
            else
                echo skip
            fi
            # install a custom version of pip, as standard pip doesn't work on jython (https://github.com/jythontools/pip/commits/develop)
            if [ ! -d "$HOME/jython-pip" ]; then
                mkdir ~/jython-pip
            else
                echo skip
            fi
            if [ ! -f ~/jython-pip/pip-7.1.2-py2.py3-none-any.whl ]; then
                wget https://pypi.python.org/packages/py2.py3/p/pip/pip-7.1.2-py2.py3-none-any.whl -O ~/jython-pip/pip-7.1.2-py2.py3-none-any.whl
            else
                echo skip
            fi
            # create jython virtualenv
            if [ ! -f "$HOME/.virtualenv/jython/bin/activate" ]; then
                virtualenv --system-site-packages --extra-search-dir="$HOME/jython-pip" -p "$HOME/jython/bin/jython" "$HOME/.virtualenv/jython"
            else
                echo skip
            fi
            source "$HOME/.virtualenv/jython/bin/activate"
        else
            echo skip
        fi
  - |
        # upgrade pypy (to a version that works with Cryptography 1.0)
        if [ -z "$PYPY_VERSION" ]; then
            echo 'this is a build of native Travis pypy/pypy3, not the upgraded one'
        elif [[ "$TRAVIS_PYTHON_VERSION" == "pypy" ]] || [[ "$TRAVIS_PYTHON_VERSION" == "pypy3" ]]; then
            export PYENV_ROOT="$HOME/.pyenv"
            if [ -f "$PYENV_ROOT/bin/pyenv" ]; then
                pushd "$PYENV_ROOT" && git pull && popd
            else
                rm -rf "$PYENV_ROOT" && git clone --depth 1 https://github.com/yyuu/pyenv.git "$PYENV_ROOT"
            fi
            echo "PYPY_VERSION=$PYPY_VERSION"
            "$PYENV_ROOT/bin/pyenv" install --skip-existing "$PYPY_VERSION"
            if [ ! -e "$HOME/.virtualenv/$PYPY_VERSION/bin/activate" ]; then
                virtualenv -p "$PYENV_ROOT/versions/$PYPY_VERSION/bin/python" "$HOME/.virtualenv/$PYPY_VERSION"
            fi
            source "$HOME/.virtualenv/$PYPY_VERSION/bin/activate"
        else
            echo skip
        fi
  - virtualenv --version
  - python --version

install:
  # installing regex on jython fails (jython can't compile the native extension), this awk filter prevents it
  - cat requirements*.txt | awk \"${JYTHON:-False}'" == "True" && /^regex/ || ! /^regex/' | xargs pip install

  - |
        # coverage has additional requirements
        if [ "$MODE" == 'coverage' ]; then
            pip install coverage
            if [ -n "$CODACY_PROJECT_TOKEN" ]; then pip install codacy-coverage; fi
            if [ -n "$COVERALLS_REPO_TOKEN" ]; then pip install coveralls; fi
            if [ -n "$CODECOV_TOKEN" ]; then wget https://codecov.io/bash -O codecov.sh && chmod +x codecov.sh; fi
        fi

before_script:
  - pip freeze
  # Before runing the test case, we need to make jython run some code as in first run it can put something on stdout
  - if [ -n "$JYTHON" ]; then python -c "print ''"; else echo skip; fi

script:
  - |
        # nosetests
        if [ -z "$MODE" ]; then
            python setup.py nosetests
        elif [ "$MODE" == 'coverage' ]; then
            python setup.py nosetests --with-coverage --cover-xml --cover-package "$(python setup.py --name)" --cover-branches
        else
            echo skip
        fi
  - |
        # yapf
        if [ "$MODE" == 'SCA' ]; then
            if [ -n "$TRAVIS_COMMIT_RANGE" ]; then
                echo "using commit range: $TRAVIS_COMMIT_RANGE"
                git diff --name-only "$TRAVIS_COMMIT_RANGE" | grep '\.py$' | xargs yapf --diff setup.py || exit
            else
                yapf --diff --recursive . || exit
            fi
        else
            echo skip
        fi
  - if [ "$MODE" == 'SCA' ]; then pyflakes . || exit; else echo skip; fi

  # isort doesn't get along with yapf. Hopefully we'll figure it out and re-enable in the future.
  # - if [ "$MODE" == 'SCA' ]; then isort --order-by-type --recursive --line-width 100 --diff --verbose --check-only || exit; else echo skip; fi

  # home-made bad code detectors
  - if [ "$MODE" == 'SCA' ]; then egrep -r '^ *class [^\(]+(\(\))?:' . && exit 1 || true; else echo skip; fi  # old-style class detector
  - if [ "$MODE" == 'SCA' ]; then grep -r 'isinstance\(' . && exit 1 || true; else echo skip; fi  # very non-pythonic
  - if [ "$MODE" == 'SCA' ]; then egrep -r '\b(all|any)\(\[' . && exit 1 || true; else echo skip; fi  # a list is unnecesarily allocated where a generator expression could have been used
  - if [ "$MODE" == 'SCA' ]; then grep -r '\_\_metaclass\_\_' . && exit 1 || true; else echo skip; fi  # bad metaclass declaration: use six

  # package installation
  - |
        if [ "$MODE" == 'SCA' ]; then
            echo skip
        else
            if [ -n "$OS_X_PYTHON_VERSION" ]; then
                # install action fails on osx for unknown reason
                python setup.py develop
            else
                python setup.py install
            fi
        fi
after_success:
  - if [ "$MODE" == 'coverage' -a -n "$CODACY_PROJECT_TOKEN" ]; then python-codacy-coverage -r coverage.xml; else echo skip; fi
  - if [ "$MODE" == 'coverage' -a -n "$COVERALLS_REPO_TOKEN" ]; then coveralls; else echo skip; fi
  - if [ "$MODE" == 'coverage' -a -n "$CODECOV_TOKEN" ]; then ./codecov.sh -X gcov -X coveragepy; else echo skip; fi
